{% set name = "cyrus-sasl" %}
{% set version = "2.1.28" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  # The source releases are strange.  Lets use the tagged source tarball instead
  # - url: https://github.com/cyrusimap/cyrus-sasl/releases/download/cyrus-sasl-{{ version }}/cyrus-sasl-{{ version }}.tar.gz
  #   sha256: 26866b1549b00ffd020f188a43c258017fa1c382b3ddadd8201536f72efb05d5
  # - url: ftp://ftp.cyrusimap.org/cyrus-sasl/{{ name }}-{{ version }}.tar.gz
  url: https://github.com/cyrusimap/cyrus-sasl/archive/cyrus-sasl-{{ version }}.tar.gz
  sha256: 3e38933a30b9ce183a5488b4f6a5937a702549cde0d3287903d80968ad4ec341
  patches:
    - patches/0001-Include-stddef-in-sasl.h-for-size_t.patch  # [win]
    - patches/0002-adjust-Makefile.am-files-for-osx.patch  # [win]
    - patches/0003-windows-fixes.patch  # [win]
    - patches/0004-openssl-1.1.1-support-on-windows.patch  # [win]
    - patches/0005-win32-Disable-staticopen-stuff.patch  # [win]
    - patches/0006-win32-Define-GCC_FALLTHROUGH.patch  # [win]
    - patches/0009-cumulative-digestmd5.patch
    - patches/0010-cumulative-ossl3.patch

build:
  number: 3
  missing_dso_whitelist:          # [osx]
    - /usr/lib/libresolv.9.dylib  # [osx]
    - /usr/lib/libpam.2.dylib     # [osx]
  run_exports:
    # https://abi-laboratory.pro/tracker/timeline/cyrus-sasl/
    # SONAME was changed once in a patch release but it was 6 years ago so
    # giving them the benefit of the doubt that it was a one-off mistake.
    - {{ pin_subpackage('cyrus-sasl') }}

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - autoconf     # [unix]
    - automake     # [unix]
    - git          # [unix]
    - groff        # [unix]
    - libtool      # [unix]
    - msys2-bash      # [win]
    - msys2-gcc-libs  # [win]
    - msys2-patch     # [win]
    - make         # [unix]
    - patch        # [not win]
    - pkg-config
  host:
    - libkrb5 {{ krb5 }}
    - openssl {{ openssl }}
    - libdb ==6.2.*        # [win]
    - sqlite {{ sqlite }}  # [win]
    - ldap3 2.9.1          # [win]

test:
  requires:
    - pkg-config  # [unix]
  commands:
    # Test main headers exist
    - test -f $PREFIX/include/sasl/sasl.h  # [unix]
    - test -f $PREFIX/include/sasl/saslplug.h  # [unix]
    - test -f $PREFIX/include/sasl/saslutil.h  # [unix]
    - if not exist %LIBRARY_INC%\\sasl\\sasl.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\sasl\\saslplug.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\sasl\\saslutil.h exit 1  # [win]

    # Test main libraries exist
    - test -f $PREFIX/lib/libsasl2.dylib  # [osx]
    - test -f $PREFIX/lib/libsasl2.so  # [linux]
    - if not exist %LIBRARY_LIB%\\libsasl.lib exit 1  # [win]

    # Test pkg-config file exists
    - test -f $PREFIX/lib/pkgconfig/libsasl2.pc  # [unix]

    # Test key SASL plugins exist
    - test -f $PREFIX/lib/sasl2/libanonymous.so  # [unix]
    - test -f $PREFIX/lib/sasl2/libplain.so  # [unix]
    - test -f $PREFIX/lib/sasl2/libsasldb.so  # [osx]
    - test -f $PREFIX/lib/sasl2/libgssapiv2.so  # [linux]
    - if not exist %LIBRARY_LIB%\\sasl2\\libanonymous.dll exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\sasl2\\libplain.dll exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\sasl2\\libsasldb.dll exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\sasl2\\libgssapiv2.dll exit 1  # [win]

    # Test key binaries exist
    - test -f $PREFIX/sbin/saslauthd  # [unix]
    - test -f $PREFIX/sbin/saslpasswd2  # [unix]
    - test -f $PREFIX/sbin/sasldblistusers2  # [unix]
    - if not exist %LIBRARY_BIN%\\saslauthd.exe exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\saslpasswd2.exe exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\sasldblistusers2.exe exit 1  # [win]
    # Test that the library can be linked
    - pkg-config --libs libsasl2  # [unix]
    - pkg-config --cflags libsasl2  # [unix]
    # Test libkrb5-dependent libraries exist
    - test -f $PREFIX/lib/libkrb5.so  # [linux]
    - test -f $PREFIX/lib/libgssapi_krb5.so  # [linux]
    - test -f $PREFIX/lib/libgssrpc.so  # [linux]
    - test -f $PREFIX/lib/libkrb5support.so  # [linux]
    - if not exist %LIBRARY_LIB%\\libkrb5.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\libgssapi_krb5.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\libgssrpc.lib exit 1  # [win]
    - if not exist %LIBRARY_LIB%\\libkrb5support.lib exit 1  # [win]
    # Test libkrb5-dependent headers exist
    - test -f $PREFIX/include/krb5.h  # [linux]
    - test -f $PREFIX/include/gssapi.h  # [linux]
    - test -f $PREFIX/include/gssapi/gssapi.h  # [linux]
    - test -f $PREFIX/include/gssapi/gssapi_krb5.h  # [linux]
    - test -f $PREFIX/include/krb5/krb5.h  # [linux]
    - test -f $PREFIX/include/gssrpc/auth_gssapi.h  # [linux]
    - if not exist %LIBRARY_INC%\\krb5.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\gssapi.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\gssapi\\gssapi.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\gssapi\\gssapi_krb5.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\krb5\\krb5.h exit 1  # [win]
    - if not exist %LIBRARY_INC%\\gssrpc\\auth_gssapi.h exit 1  # [win]
    
    # Test libkrb5-dependent utilities exist
    - test -f $PREFIX/bin/krb5-config  # [linux]
    - test -f $PREFIX/bin/gss-client  # [linux]
    - if not exist %LIBRARY_BIN%\\krb5-config.exe exit 1  # [win]
    - if not exist %LIBRARY_BIN%\\gss-client.exe exit 1  # [win]
    
    # Test that libkrb5 utilities work
    - $PREFIX/bin/krb5-config --version  # [linux]
    - $PREFIX/bin/krb5-config --libs  # [linux]
    - $PREFIX/bin/krb5-config --cflags  # [linux]
    - %LIBRARY_BIN%\\krb5-config.exe --version  # [win]
    - %LIBRARY_BIN%\\krb5-config.exe --libs  # [win]
    - %LIBRARY_BIN%\\krb5-config.exe --cflags  # [win]

about:
  home: https://www.cyrusimap.org/sasl/
  license: BSD-3-Clause-Attribution
  license_family: BSD
  license_file: COPYING
  summary: |
    This is the Cyrus SASL API implementation. It can be used on the client or server side to provide
    authentication and authorization services. See RFC 4422 for more information.
  description: |
    Simple Authentication and Security Layer (SASL) is a specification that describes how
    authentication mechanisms can be plugged into an application protocol on the wire. Cyrus
    SASL is an implementation of SASL that makes it easy for application developers to integrate
    authentication mechanisms into their application in a generic way.
  dev_url: https://github.com/cyrusimap/cyrus-sasl
  doc_url: https://www.cyrusimap.org/sasl/

extra:
  recipe-maintainers:
    - mariusvniekerk
    - martindurant
    - mingwandroid
    - wesm
    - StephenSmith25
